# Query: const
# ContextLines: 1

98 results - 25 files

.clang-format:
  31  ColumnLimit: 100
  32: ConstructorInitializerIndentWidth: 8
  33  ContinuationIndentWidth: 8

apps/siggen/src/main.c:
  19  
  20: void gen_triangle(const struct device *dac_dev, int chan)
  21  {
  22: 	const int min PROGMEM = 0;
  23: 	const int max PROGMEM = 1241; // 1V
  24  	bool up = true;
  25  	int value = 0;
  26: 	const int delay PROGMEM = 110;
  27  

  54  
  55: 	const struct device *dac_dev PROGMEM = DEVICE_DT_GET(DAC_DEVICE_NODE);
  56  

  60  
  61: 	const int chan PROGMEM = 1;
  62  

apps/siot-net/src/main.c:
  15  // zbus point_chan.
  16: static const struct nvs_point nvs_pts[] PROGMEM= {
  17  	{1, &point_def_boot_count, "0"}, {2, &point_def_description, "0"},

apps/siot-net/src/web.c:
   80  
   81: // static const struct json_obj_descr point_descr[] = {
   82  // 	JSON_OBJ_DESCR_FIELD(struct point_js_t, type, JSON_TOK_STRING),

   86  static int v1_handler(struct http_client_ctx *client, enum http_data_status status,
   87: 		      const struct http_request_ctx *request_ctx, struct http_response_ctx *resp,
   88  		      void *user_data)

  180  
  181: 	const struct zbus_channel *chan;
  182  	while (!zbus_sub_wait_msg(&web_sub, &chan, &p, K_FOREVER)) {

apps/z-mr/README.md:
  21  
  22: The application is constructed of a number of threads that mostly read or write
  23  points to a single

apps/z-mr/src/ble.c:
  18  
  19: static const struct bt_data ad[] PROGMEM = {
  20      BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),

apps/z-mr/src/dc.c:
   37  
   38: static const struct device *const keymap_dev = DEVICE_DT_GET(DT_NODELABEL(keymap));
   39  

   95  
   96: 	static const char MSG_AON[] = "AON";
   97: 	static const char MSG_ONA[] = "ONA";
   98: 	static const char MSG_BON[] = "BON";
   99: 	static const char MSG_ONB[] = "ONB";
  100  

  107  
  108: 			const char *msg = "unknown";
  109  			bool on_b = false;

apps/z-mr/src/fan.c:
  25  
  26: // static const struct device *gpio_dev;
  27  // static struct gpio_callback gpio_cb;

  29  static bool alarm = false;
  30: const static struct device *const i2c_dev = DEVICE_DT_GET(DT_NODELABEL(i2c0));
  31  
  32: void fan_alarm_asserted(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
  33  {

apps/z-mr/src/led.c:
   24  #define I2C0_NODE DT_NODELABEL(mcp23018_20)
   25: static const struct i2c_dt_spec gpioExpander = I2C_DT_SPEC_GET(I2C0_NODE);
   26  
   27: const static struct device *i2c_dev = DEVICE_DT_GET(DT_NODELABEL(i2c0));
   28  
   29: void z_led_setup(const struct device *mcp_device)
   30  {

   71  // LED num starts at 0
   72: void z_led_set(const struct device *mcp_device, bool is_b, int num, bool on)
   73  {

   89  
   90: void z_leds_test_pattern(const struct device *mcp_device)
   91  {

  137  
  138: 	const struct device *mcp_device = DEVICE_DT_GET(DT_NODELABEL(mcp23018_20));
  139  

  149  	point p;
  150: 	const struct zbus_channel *chan;
  151  

apps/z-mr/src/main.c:
  13  
  14: const point_def point_def_snmp_server = {POINT_TYPE_SNMP_SERVER, POINT_DATA_TYPE_STRING};
  15  

  17  // zbus point_chan.
  18: static const struct nvs_point nvs_pts[] = {
  19  	{1, &point_def_boot_count, "0"},  {2, &point_def_description, "0"},

apps/z-mr/src/snmp.c:
  26  	point p;
  27: 	const struct zbus_channel *chan;
  28  

apps/z-mr/src/w1.c:
  21   */
  22: static const struct device *get_ds18b20_device(void)
  23  {
  24: 	const struct device *const dev = DEVICE_DT_GET_ANY(maxim_ds18b20);
  25  

  44  {
  45: 	const struct device *dev = get_ds18b20_device();
  46  	int res;

apps/z-mr/src/wd.c:
  12  {
  13: 	const struct device *gpio_dev = DEVICE_DT_GET(DT_NODELABEL(gpio0));
  14  

apps/z-mr/src/web.c:
   80  
   81: // static const struct json_obj_descr point_descr[] = {
   82  // 	JSON_OBJ_DESCR_FIELD(struct point_js_t, type, JSON_TOK_STRING),

   86  static int v1_handler(struct http_client_ctx *client, enum http_data_status status,
   87: 		      const struct http_request_ctx *request_ctx, struct http_response_ctx *resp,
   88  		      void *user_data)

  180  
  181: 	const struct zbus_channel *chan;
  182  	while (!zbus_sub_wait_msg(&web_sub, &chan, &p, K_FOREVER)) {

boards/esp32_poe/board_init.c:
  14  {
  15: 	const struct device *gpio = DEVICE_DT_GET(DT_NODELABEL(gpio0));
  16  

boards/esp32_poe_wrover/board_init.c:
  14  {
  15: 	const struct device *gpio = DEVICE_DT_GET(DT_NODELABEL(gpio0));
  16  

include/html.h:
  5  
  6: void html_parse_form_data(const char *body, html_form_callback callback);
  7  

include/nvs.h:
   8    uint16_t nvs_id;
   9:   const point_def *point_def;   
  10    char *key;

  12  
  13: int nvs_init(const struct nvs_point *nvs_pts_in, size_t len);
  14  

include/point.h:
  57  
  58: extern const point_def point_def_description;
  59: extern const point_def point_def_staticip;
  60: extern const point_def point_def_address;
  61: extern const point_def point_def_netmask;
  62: extern const point_def point_def_gateway;
  63: extern const point_def point_def_metric_sys_cpu_percent;
  64: extern const point_def point_def_uptime;
  65: extern const point_def point_def_temperature;
  66: extern const point_def point_def_board;
  67: extern const point_def point_def_boot_count;
  68  
  69: void point_set_type(point *p, const char *t);
  70: void point_set_key(point *p, const char *k);
  71: void point_set_type_key(point *p, const char *t, const char *k);
  72  

  76  
  77: void point_put_int(point *p, const int v);
  78: void point_put_float(point *p, const float v);
  79: void point_put_string(point *p, const char *v);
  80  

include/siot-string.h:
  5  char *itoa(int num, char *str, int base);
  6: int atoi(const char *str);
  7: float atof(const char *str);
  8  

lib/html.c:
   6  
   7: char *z_strdup(const char *str)
   8  {

  52  // Function to parse form data (key=value pairs separated by '&')
  53: void html_parse_form_data(const char *body, html_form_callback callback)
  54  {

lib/nvs.c:
   26  
   27: static const struct nvs_point *nvs_pts;
   28  static size_t nvs_pts_count = 0;

   30  // returns -1 if not found
   31: int point_type_key_to_nvs_id(const struct nvs_point *pts, size_t len, char *type, char *key)
   32  {

   41  // this needs to be called early on from your application
   42: int nvs_init(const struct nvs_point *nvs_pts_in, size_t len)
   43  {

   80  	for (int i = 0; i < len; i++) {
   81: 		const struct nvs_point *npt = &nvs_pts_in[i];
   82  		switch (npt->point_def->data_type) {

  175  
  176: 	const struct zbus_channel *chan;
  177  	point p;

lib/point.c:
   16  
   17: const point_def point_def_description = {POINT_TYPE_DESCRIPTION, POINT_DATA_TYPE_STRING};
   18: const point_def point_def_staticip = {POINT_TYPE_STATICIP, POINT_DATA_TYPE_INT};
   19: const point_def point_def_address = {POINT_TYPE_ADDRESS, POINT_DATA_TYPE_STRING};
   20: const point_def point_def_netmask = {POINT_TYPE_NETMASK, POINT_DATA_TYPE_STRING};
   21: const point_def point_def_gateway = {POINT_TYPE_GATEWAY, POINT_DATA_TYPE_STRING};
   22: const point_def point_def_metric_sys_cpu_percent = {POINT_TYPE_METRIC_SYS_CPU_PERCENT,
   23  						    POINT_DATA_TYPE_FLOAT};
   24: const point_def point_def_uptime = {POINT_TYPE_UPTIME, POINT_DATA_TYPE_INT};
   25: const point_def point_def_temperature = {POINT_TYPE_TEMPERATURE, POINT_DATA_TYPE_FLOAT};
   26: const point_def point_def_board = {POINT_TYPE_BOARD, POINT_DATA_TYPE_STRING};
   27: const point_def point_def_boot_count = {POINT_TYPE_BOOT_COUNT, POINT_DATA_TYPE_INT};
   28  
   29: void point_set_type(point *p, const char *t)
   30  {

   33  
   34: void point_set_key(point *p, const char *k)
   35  {

   38  
   39: void point_set_type_key(point *p, const char *t, const char *k)
   40  {

   59  
   60: void point_put_int(point *p, const int v)
   61  {

   65  
   66: void point_put_float(point *p, const float v)
   67  {

   71  
   72: void point_put_string(point *p, const char *v)
   73  {

  198  
  199: static const struct json_obj_descr point_js_descr[] = {
  200  	JSON_OBJ_DESCR_PRIM(struct point_js, t, JSON_TOK_STRING),

  204  
  205: static const struct json_obj_descr point_js_array_descr[] = {
  206  	JSON_OBJ_DESCR_OBJ_ARRAY(struct point_js_array, points, POINT_JS_ARRAY_MAX, len,

  406  
  407: static int handle_sendpoint(const struct shell *shell, size_t argc, char **argv)
  408  {

lib/siot-string.c:
  109  
  110: int atoi(const char *str)
  111  {

  134  
  135: float atof(const char *str)
  136  {

tests/point.c:
   65  
   66: static const struct json_obj_descr sensor2_value_descr[] = {
   67  	JSON_OBJ_DESCR_PRIM(struct sensor2_value, x_value, JSON_TOK_NUMBER),

   71  
   72: static const struct json_obj_descr example_json_payload_descr[] = {
   73  	JSON_OBJ_DESCR_PRIM(struct example_json_payload, timestamp, JSON_TOK_NUMBER),

  117  
  118: static const struct json_obj_descr float_value_descr[] = {
  119  	JSON_OBJ_DESCR_PRIM(struct float_value, value, JSON_TOK_FLOAT),

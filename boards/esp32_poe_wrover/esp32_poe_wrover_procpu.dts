/*
 * Copyright (c) 2023 Espressif Systems (Shanghai) Co., Ltd.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/dts-v1/;

#include <espressif/esp32/esp32_wrover_e_n4r8.dtsi>
#include "esp32_poe_wrover-pinctrl.dtsi"
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <zephyr/dt-bindings/input/esp32-touch-sensor-input.h>
#include <espressif/partitions_0x1000_amp.dtsi>

/ {
	model = "Olimex ESP32-POE WROVER PROCPU";
	compatible = "espressif,esp32";

	aliases {
		uart-0 = &uart0;
		i2c-0 = &i2c0;
		sw0 = &button0;
		watchdog0 = &wdt0;
	};

	buttons {
		compatible = "gpio-keys";
		button0: button_0 {
			gpios = <&gpio0 0 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "BOOT Button";
			zephyr,code = <INPUT_KEY_0>;
		};
	};

	chosen {
		zephyr,sram = &sram1;
		zephyr,console = &uart0;
		zephyr,shell-uart = &uart0;
		zephyr,flash = &flash0;
		zephyr,code-partition = &slot0_partition;
		zephyr,bt-hci = &esp32_bt_hci;
	};
};

&uart0 {
	status = "okay";
	current-speed = <115200>;
	pinctrl-0 = <&uart0_default>;
	pinctrl-names = "default";
};

&uart1 {
	current-speed = <115200>;
	pinctrl-0 = <&uart1_default>;
	pinctrl-names = "default";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

&touch {
	debounce-interval-ms = <30>;
	href-microvolt = <2700000>;
	lref-microvolt = <500000>;
	href-atten-microvolt = <1000000>;
	filter-mode = <ESP32_TOUCH_FILTER_MODE_IIR_16>;
	filter-debounce-cnt = <1>;
	filter-noise-thr = <ESP32_TOUCH_FILTER_NOISE_THR_4_8TH>;
	filter-jitter-step = <4>;
	filter-smooth-level = <ESP32_TOUCH_FILTER_SMOOTH_MODE_IIR_2>;
};

&i2c0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;
	sda-gpios = <&gpio0 13 GPIO_OPEN_DRAIN>;
	scl-gpios = <&gpio0 33 GPIO_OPEN_DRAIN>;
	pinctrl-0 = <&i2c0_default>;
	pinctrl-names = "default";
};

&spi2 {
	status = "disabled";
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";
	pinctrl-0 = <&spim2_default>;
	pinctrl-names = "default";
};

// Native SD controller (SDMMC) configuration
// Note: GPIO14 (CLK) and GPIO15 (CMD) conflict with SPI2 configuration above.
// Disable SPI2 if you need to use the SD controller.
&sdhc {
	status = "okay";
};

&sdhc0 {
	status = "okay";
	bus-width = <1>;          // 1-bit SD mode
	clk-pin = <14>;           // GPIO14 - SD CLK
	cmd-pin = <15>;           // GPIO15 - SD CMD
	d0-pin = <2>;             // GPIO2  - SD DAT0
	pinctrl-0 = <&sdhc0_default>;
	pinctrl-names = "default";

	mmc {
		compatible = "zephyr,sdmmc-disk";
		disk-name = "SD";
		status = "okay";
	};
};

&timer0 {
	status = "disabled";
};

&timer1 {
	status = "disabled";
};

&timer2 {
	status = "disabled";
};

&timer3 {
	status = "disabled";
};

&trng0 {
	status = "okay";
};

&esp32_bt_hci {
	status = "okay";
};

// The following note is found in the ESP32-POE user manual:
// WROVER module uses two extra ESP32 pins for the PSRAM and these pins canâ€™t be used for other
// purposes. This is important especially if you switch from regular version to WROVER version. This is
// easily noticeable in the middle of the schematic. GPIO16 and GPIO17 are used by the PSRAM, so
// GPIO17 that was used for Ethernet clock was replaced by GPIO0 and GPIO16 was replaced by GPIO33.
// You should do the requires software changes in your code if you switch from ESP32-POE to WROVER
// version.

&mdio {
	pinctrl-0 = <&mdio_default>;
	pinctrl-names = "default";
	ref-clk-output-gpios = <&gpio0 0 0>;

	phy: ethernet-phy@0 {
		compatible = "ethernet-phy";
		status = "disabled";
		reg = <0>;
	};
};

&eth {
	phy-handle = <&phy>;
	phy-connection-type = "rmii";
	ref-clk-output-gpios = <&gpio0 0 0>;
};

&psram0 {
  size = <DT_SIZE_M(8)>;
};
